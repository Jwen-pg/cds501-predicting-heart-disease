# saves plot
png(file="../figures/activity_dist.png", width=600, height=350)
ggplot(data) + geom_bar(aes(x = Active, fill = Target), position = 'dodge', alpha=0.8) + theme_bw() + ggtitle("Physical Activity Distribution") + xlab("Activity") + ylab("Count") + scale_fill_manual(values=c("#15158a", "#eb4034"))
dev.off()
ggplot(data) + geom_bar(aes(x = Gender, fill = Target), position = 'dodge', alpha=0.8) + theme_bw() + ggtitle("Gender Distribution") + xlab("Gender") + ylab("Count") + scale_fill_manual(values=c("#15158a", "#eb4034"))
# saves plot
png(file="../figures/gender_dist.png", width=600, height=350)
ggplot(data) + geom_bar(aes(x = Gender, fill = Target), position = 'dodge', alpha=0.8) + theme_bw() + ggtitle("Gender Distribution") + xlab("Gender") + ylab("Count") + scale_fill_manual(values=c("#15158a", "#eb4034"))
dev.off()
ggplot(data, aes(x= Age , y = Height, color = Target)) +  geom_point(alpha = 0.9) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("Age Vs. Height")
# saves plot
png(file="../figures/age_vs_height.png", width=600, height=350)
ggplot(data, aes(x= Age , y = Height, color = Target)) +  geom_point(alpha = 0.9) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("Age Vs. Height")
dev.off()
ggplot(data, aes(x= Height , y = Weight, color = Target)) +  geom_point(alpha = 0.8) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("Height Vs. Weight")
# saves plot
png(file="../figures/height_vs_weight.png", width=600, height=350)
ggplot(data, aes(x= Height , y = Weight, color = Target)) +  geom_point(alpha = 0.8) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("Height Vs. Weight")
dev.off()
ggplot(data, aes(x= BMI , y = Systole, color = Target)) +  geom_point(alpha = 0.8) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("BMI Vs. Systolic Pressure")
# saves plot
png(file="../figures/bmi_vs_systole.png", width=600, height=350)
ggplot(data, aes(x= BMI , y = Systole, color = Target)) +  geom_point(alpha = 0.8) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("BMI Vs. Systolic Pressure")
dev.off()
ggplot(data, aes(x= BMI , y = Diastole, color = Target)) +  geom_point(alpha = 0.8) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("BMI Vs. Diastolic Pressure")
# saves plot
png(file="../figures/bmi_vs_diastole.png", width=600, height=350)
ggplot(data, aes(x= BMI , y = Diastole, color = Target)) +  geom_point(alpha = 0.8) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("BMI Vs. Diastolic Pressure")
dev.off()
png(file="../figures/cor_numeric.png", width=600, height=350)
cor <- cor(data[, c("Age", "Height", "Weight", "BMI", "Systole", "Diastole")])
palette = colorRampPalette(c("skyblue", "blue", "yellow"))(20)
heatmap(cor, col = palette, scale = "column")
dev.off()
heatmap(cor, col = palette, scale = "column")
# removes observation for which 'ap_hi' or 'ap_lo' has negative values
data <- subset(data, ap_hi > 0 & ap_lo > 0)
# removes observation for which 'ap_hi' or 'ap_lo' has negative values
data <- subset(data, Systolic > 0 & Diastolic > 0)
# removes observation for which 'Systole' or 'Diastole' has negative values
data <- subset(data, Systole > 0 & Diastole > 0)
data <- subset(data, Systole > 0 & Diastole > 0)
# removes 'ap_hi' and 'ap_lo' outliers
iqr_multiplier = 3
ap_hi_upper_threshold <- quantile(data$Systole, .75) + iqr_multiplier * (quantile(data$Systole, .75) - quantile(data$Systole, .25))
ap_hi_lower_threshold <- quantile(data$Systole, .25) - iqr_multiplier * (quantile(data$Systole, .75) - quantile(data$Systole, .25))
ap_lo_upper_threshold <- quantile(data$Diastole, .75) + iqr_multiplier * (quantile(data$Diastole, .75) - quantile(data$Diastole, .25))
ap_lo_lower_threshold <- quantile(data$Diastole, .25) - iqr_multiplier * (quantile(data$Diastole, .75) - quantile(data$Diastole, .25))
data <- subset(data, ap_hi < ap_hi_upper_threshold & ap_hi > ap_hi_lower_threshold & ap_lo < ap_lo_upper_threshold & ap_lo > ap_hi_lower_threshold)
# removes observation for which 'Systole' or 'Diastole' has negative values
data <- subset(data, Systole > 0 & Diastole > 0)
# removes 'ap_hi' and 'ap_lo' outliers
iqr_multiplier = 3
ap_hi_upper_threshold <- quantile(data$Systole, .75) + iqr_multiplier * (quantile(data$Systole, .75) - quantile(data$Systole, .25))
ap_hi_lower_threshold <- quantile(data$Systole, .25) - iqr_multiplier * (quantile(data$Systole, .75) - quantile(data$Systole, .25))
ap_lo_upper_threshold <- quantile(data$Diastole, .75) + iqr_multiplier * (quantile(data$Diastole, .75) - quantile(data$Diastole, .25))
ap_lo_lower_threshold <- quantile(data$Diastole, .25) - iqr_multiplier * (quantile(data$Diastole, .75) - quantile(data$Diastole, .25))
data <- subset(data, Systole < ap_hi_upper_threshold & Systole > ap_hi_lower_threshold & Diastole < ap_lo_upper_threshold & Diastole > ap_lo_lower_threshold)
# removes 'weight' outliers
weight_iqr_multiplier = 1.5
weight_upper_threshold <- quantile(data$Weight, .75) + weight_iqr_multiplier * (quantile(data$Weight, .75) - quantile(data$Weight, .25))
weight_lower_threshold <- quantile(data$Weight, .25) - weight_iqr_multiplier * (quantile(data$Weight, .75) - quantile(data$Weight, .25))
data <- subset(data, weight > weight_lower_threshold & weight < weight_upper_threshold)
data <- subset(data, Weight > weight_lower_threshold & Weight < weight_upper_threshold)
# summerizes newly encoded dataset
summary(data)
library(varhandle)
library(corrplot)
library(ggplot2)
# sets directory of current file as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# sets directory of current file as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# sets directory of current file as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# sets directory of current file as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# reads dataset
data <- read.csv2("../data/cardio.csv")
# drops 'id' attribute from the dataset
data <- subset(data, select = -c(id))
# recoding categorical or ordered data into readable format
data$cardio <- as.factor(ifelse(data$cardio == 0, "Negative", "Positive"))
data$active <- as.factor(ifelse(data$active == 0, "Inactive", "Active"))
data$alco <- as.factor(ifelse(data$alco == 0, "Non-alcoholic", "Alcoholic"))
data$smoke <- as.factor(ifelse(data$smoke == 0, "Non-smoker", "Smoker"))
data$gluc <- as.ordered(ifelse(data$gluc == 1, "Normal", ifelse(data$gluc == 2, "Above Normal", "Well Above Normal")))
data$cholesterol <- as.ordered(ifelse(data$cholesterol == 1, "Normal", ifelse(data$cholesterol == 2, "Above Normal", "Well Above Normal")))
data$gender <- as.factor(ifelse(data$gender == 1, "Woman", "Man"))
# converts 'weight' from character to numeric
data$weight <- unfactor(data$weight)
# converts unit of 'age' from days to years
data$age <- round(data$age / 365, digits = 0)
# creates 'BMI' column from corresponding 'height' and 'weight'
data$BMI <- (data$weight / ((data$height * 0.01) ^ 2))
# changes column names to readable format
colnames(data) <- c("Age", "Gender", "Height", "Weight", "Systole", "Diastole", "Cholesterol", "Glucose", "Smoking", "Alcohol", "Active", "Target", "BMI")
head(data)
# explores types of the attributes
unlist(sapply(data, class))
# summerizes dataset
summary(data)
ggplot(data) + geom_density(aes(x = Age, fill = Target), alpha=0.8) + ggtitle("Age Density Plot") + xlab("Age") + ylab("Density") + theme_bw() + scale_fill_manual(values=c("#15158a", "#eb4034"))
# saves plot
png(file="../figures/age_dist.png", width=600, height=350)
# saves plot
png(file="../figures/age_dist.png", width=600, height=350)
# sets directory of current file as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
---
title: "CDS505 Project"
subtitle: "`r knitr::current_input(dir = TRUE)`"
output: pdf_document
---
# Loading Libraries
pwd()
getwd()
library(varhandle)
library(corrplot)
library(ggplot2)
# sets directory of current file as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
getwd()
# sets directory of current file as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
title: "CDS505 Project"
subtitle: "`r knitr::current_input(dir = TRUE)`"
output: pdf_document
---
# Loading Libraries
```{r}
library(varhandle)
library(corrplot)
library(ggplot2)
```
# Loading Data
```{r}
# sets directory of current file as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# Setup knitr
```{r setup, include=FALSE, echo=FALSE}
require("knitr")
opts_knit$set(root.dir = dirname(rstudioapi::getActiveDocumentContext()$path))
```
```{r setup, include=FALSE, echo=FALSE}
dirname(rstudioapi::getActiveDocumentContext()$path)
library(varhandle)
library(corrplot)
library(ggplot2)
require("knitr")
opts_knit$set(root.dir = dirname(rstudioapi::getActiveDocumentContext()$path))
# sets directory of current file as working directory
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
# sets working directory to the directory of this file
require("knitr")
opts_knit$set(root.dir = dirname(rstudioapi::getActiveDocumentContext()$path))
# reads dataset
data <- read.csv2("../data/cardio.csv")
# drops 'id' attribute from the dataset
data <- subset(data, select = -c(id))
library(varhandle)
library(corrplot)
library(ggplot2)
# sets working directory to the directory of this file
require("knitr")
opts_knit$set(root.dir = dirname(rstudioapi::getActiveDocumentContext()$path))
# reads dataset
data <- read.csv2("../data/cardio.csv")
# drops 'id' attribute from the dataset
data <- subset(data, select = -c(id))
# recoding categorical or ordered data into readable format
data$cardio <- as.factor(ifelse(data$cardio == 0, "Negative", "Positive"))
data$active <- as.factor(ifelse(data$active == 0, "Inactive", "Active"))
data$alco <- as.factor(ifelse(data$alco == 0, "Non-alcoholic", "Alcoholic"))
data$smoke <- as.factor(ifelse(data$smoke == 0, "Non-smoker", "Smoker"))
data$gluc <- as.ordered(ifelse(data$gluc == 1, "Normal", ifelse(data$gluc == 2, "Above Normal", "Well Above Normal")))
data$cholesterol <- as.ordered(ifelse(data$cholesterol == 1, "Normal", ifelse(data$cholesterol == 2, "Above Normal", "Well Above Normal")))
data$gender <- as.factor(ifelse(data$gender == 1, "Woman", "Man"))
# converts 'weight' from character to numeric
data$weight <- unfactor(data$weight)
# converts unit of 'age' from days to years
data$age <- round(data$age / 365, digits = 0)
# creates 'BMI' column from corresponding 'height' and 'weight'
data$BMI <- (data$weight / ((data$height * 0.01) ^ 2))
# changes column names to readable format
colnames(data) <- c("Age", "Gender", "Height", "Weight", "Systole", "Diastole", "Cholesterol", "Glucose", "Smoking", "Alcohol", "Active", "Target", "BMI")
head(data)
# explores types of the attributes
unlist(sapply(data, class))
# summerizes dataset
summary(data)
ggplot(data) + geom_density(aes(x = Age, fill = Target), alpha=0.8) + ggtitle("Age Density Plot") + xlab("Age") + ylab("Density") + theme_bw() + scale_fill_manual(values=c("#15158a", "#eb4034"))
# saves plot
png(file="../figures/age_dist.png", width=600, height=350)
ggplot(data) + geom_density(aes(x = Age, fill = Target), alpha=0.8) + ggtitle("Age Density Plot") + xlab("Age") + ylab("Density") + theme_bw() + scale_fill_manual(values=c("#15158a", "#eb4034"))
dev.off()
ggplot(data) + geom_density(aes(x = Height, fill = Target), alpha=0.8) + ggtitle("Height Density Plot") + xlab("Height") + ylab("Density") + theme_bw() + scale_fill_manual(values=c("#15158a", "#eb4034"))
# saves plot
png(file="../figures/height_dist.png", width=600, height=350)
ggplot(data) + geom_density(aes(x = Height, fill = Target), alpha=0.8) + ggtitle("Height Density Plot") + xlab("Height") + ylab("Density") + theme_bw() + scale_fill_manual(values=c("#15158a", "#eb4034"))
dev.off()
ggplot(data) + geom_density(aes(x = Weight, fill = Target), alpha=0.8) + ggtitle("Weight Density Plot") + xlab("Weight") + ylab("Density") + theme_bw() + scale_fill_manual(values=c("#15158a", "#eb4034"))
# saves plot
png(file="../figures/weight_dist.png", width=600, height=350)
ggplot(data) + geom_density(aes(x = Weight, fill = Target), alpha=0.8) + ggtitle("Weight Density Plot") + xlab("Weight") + ylab("Density") + theme_bw() + scale_fill_manual(values=c("#15158a", "#eb4034"))
dev.off()
ggplot(data) + geom_density(aes(x = BMI, fill = Target), alpha=0.8) + ggtitle("BMI Density Plot") + xlab("BMI") + ylab("Density") + theme_bw() + scale_fill_manual(values=c("#15158a", "#eb4034"))
# saves plot
png(file="../figures/bmi_dist.png", width=600, height=350)
ggplot(data) + geom_density(aes(x = BMI, fill = Target), alpha=0.8) + ggtitle("BMI Density Plot") + xlab("BMI") + ylab("Density") + theme_bw() + scale_fill_manual(values=c("#15158a", "#eb4034"))
dev.off()
ggplot(data) + geom_bar(aes(x = Target, fill = Target), alpha=0.8) + theme_bw() + ggtitle("Class Distribution") + xlab("Target") + ylab("Count") + scale_fill_manual(values=c("#15158a", "#eb4034"))
# saves plot
png(file="../figures/class_dist.png", width=600, height=350)
ggplot(data) + geom_bar(aes(x = Target, fill = Target), alpha=0.8) + theme_bw() + ggtitle("Class Distribution") + xlab("Target") + ylab("Count") + scale_fill_manual(values=c("#15158a", "#eb4034"))
dev.off()
ggplot(data) + geom_bar(aes(x = Smoking, fill = Target), position = 'dodge', alpha=0.8) + theme_bw() + ggtitle("Smoking Distribution") + xlab("Smoking") + ylab("Count") + scale_fill_manual(values=c("#15158a", "#eb4034"))
# saves plot
png(file="../figures/smoking_dist.png", width=600, height=350)
ggplot(data) + geom_bar(aes(x = Smoking, fill = Target), position = 'dodge', alpha=0.8) + theme_bw() + ggtitle("Smoking Distribution") + xlab("Smoking") + ylab("Count") + scale_fill_manual(values=c("#15158a", "#eb4034"))
dev.off()
ggplot(data) + geom_bar(aes(x = Alcohol, fill = Target), position = 'dodge', alpha=0.8) + theme_bw() + ggtitle("Alcohol Distribution") + xlab("Alcohol") + ylab("Count") + scale_fill_manual(values=c("#15158a", "#eb4034"))
# saves plot
png(file="../figures/alcohol_dist.png", width=600, height=350)
ggplot(data) + geom_bar(aes(x = Alcohol, fill = Target), position = 'dodge', alpha=0.8) + theme_bw() + ggtitle("Alcohol Distribution") + xlab("Alcohol") + ylab("Count") + scale_fill_manual(values=c("#15158a", "#eb4034"))
dev.off()
ggplot(data) + geom_bar(aes(x = Active, fill = Target), position = 'dodge', alpha=0.8) + theme_bw() + ggtitle("Physical Activity Distribution") + xlab("Activity") + ylab("Count") + scale_fill_manual(values=c("#15158a", "#eb4034"))
# saves plot
png(file="../figures/activity_dist.png", width=600, height=350)
ggplot(data) + geom_bar(aes(x = Active, fill = Target), position = 'dodge', alpha=0.8) + theme_bw() + ggtitle("Physical Activity Distribution") + xlab("Activity") + ylab("Count") + scale_fill_manual(values=c("#15158a", "#eb4034"))
dev.off()
ggplot(data) + geom_bar(aes(x = Gender, fill = Target), position = 'dodge', alpha=0.8) + theme_bw() + ggtitle("Gender Distribution") + xlab("Gender") + ylab("Count") + scale_fill_manual(values=c("#15158a", "#eb4034"))
# saves plot
png(file="../figures/gender_dist.png", width=600, height=350)
ggplot(data) + geom_bar(aes(x = Gender, fill = Target), position = 'dodge', alpha=0.8) + theme_bw() + ggtitle("Gender Distribution") + xlab("Gender") + ylab("Count") + scale_fill_manual(values=c("#15158a", "#eb4034"))
dev.off()
ggplot(data, aes(x= Age , y = Height, color = Target)) +  geom_point(alpha = 0.9) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("Age Vs. Height")
# saves plot
png(file="../figures/age_vs_height.png", width=600, height=350)
ggplot(data, aes(x= Age , y = Height, color = Target)) +  geom_point(alpha = 0.9) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("Age Vs. Height")
dev.off()
ggplot(data, aes(x= Height , y = Weight, color = Target)) +  geom_point(alpha = 0.8) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("Height Vs. Weight")
# saves plot
png(file="../figures/height_vs_weight.png", width=600, height=350)
ggplot(data, aes(x= Height , y = Weight, color = Target)) +  geom_point(alpha = 0.8) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("Height Vs. Weight")
dev.off()
ggplot(data, aes(x= BMI , y = Systole, color = Target)) +  geom_point(alpha = 0.8) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("BMI Vs. Systolic Pressure")
# saves plot
png(file="../figures/bmi_vs_systole.png", width=600, height=350)
ggplot(data, aes(x= BMI , y = Systole, color = Target)) +  geom_point(alpha = 0.8) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("BMI Vs. Systolic Pressure")
dev.off()
ggplot(data, aes(x= BMI , y = Diastole, color = Target)) +  geom_point(alpha = 0.8) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("BMI Vs. Diastolic Pressure")
# saves plot
png(file="../figures/bmi_vs_diastole.png", width=600, height=350)
ggplot(data, aes(x= BMI , y = Diastole, color = Target)) +  geom_point(alpha = 0.8) + scale_color_manual(values=c("#15158a", "#eb4034")) + stat_smooth() + ggtitle("BMI Vs. Diastolic Pressure")
dev.off()
png(file="../figures/cor_numeric.png", width=600, height=350)
cor <- cor(data[, c("Age", "Height", "Weight", "BMI", "Systole", "Diastole")])
palette = colorRampPalette(c("skyblue", "blue", "yellow"))(20)
heatmap(cor, col = palette, scale = "column")
dev.off()
heatmap(cor, col = palette, scale = "column")
# removes observation for which 'Systole' or 'Diastole' has negative values
data <- subset(data, Systole > 0 & Diastole > 0)
# removes 'ap_hi' and 'ap_lo' outliers
iqr_multiplier = 3
ap_hi_upper_threshold <- quantile(data$Systole, .75) + iqr_multiplier * (quantile(data$Systole, .75) - quantile(data$Systole, .25))
ap_hi_lower_threshold <- quantile(data$Systole, .25) - iqr_multiplier * (quantile(data$Systole, .75) - quantile(data$Systole, .25))
ap_lo_upper_threshold <- quantile(data$Diastole, .75) + iqr_multiplier * (quantile(data$Diastole, .75) - quantile(data$Diastole, .25))
ap_lo_lower_threshold <- quantile(data$Diastole, .25) - iqr_multiplier * (quantile(data$Diastole, .75) - quantile(data$Diastole, .25))
data <- subset(data, Systole < ap_hi_upper_threshold & Systole > ap_hi_lower_threshold & Diastole < ap_lo_upper_threshold & Diastole > ap_lo_lower_threshold)
# removes 'weight' outliers
weight_iqr_multiplier = 1.5
weight_upper_threshold <- quantile(data$Weight, .75) + weight_iqr_multiplier * (quantile(data$Weight, .75) - quantile(data$Weight, .25))
weight_lower_threshold <- quantile(data$Weight, .25) - weight_iqr_multiplier * (quantile(data$Weight, .75) - quantile(data$Weight, .25))
data <- subset(data, Weight > weight_lower_threshold & Weight < weight_upper_threshold)
# summerizes newly encoded dataset
summary(data)
install.packages("caTools")
s
library(caTool)
library(caTools)
install.packages('rpart')
install.packages('rsamples')
install.packages('rsample')
library(rsample)
# train/test split
set.seed(1994)
split <- initial_split(data, prop=0.75, strata = "Target")
train <- training(split)
test <- testing(split)
# create recipe object
heart_recipe <- recipe(Target ~ ., data= data) %>% step_knnimpute(all_predictors())
library(rpart)
# create recipe object
heart_recipe <- recipe(Target ~ ., data= data) %>% step_knnimpute(all_predictors())
fit <- rpart(Target ~ ., data = train, method = "class")
install.packages('rattle')
install.packages('rpart.plot')
install.packages('RColorBrewer')
library(varhandle)
library(corrplot)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
fancyRpartPlot(fit)
fit <- rpart(Target ~ Age + BMI + Gender, data = train, method = "class")
fancyRpartPlot(fit)
fit <- rpart(Target ~ Age + BMI + Gender + Cholesterol + Glucose + Smoking + Alcohol, data = train, method = "class")
fancyRpartPlot(fit)
head(train)
str(train)
str(test)
fit <- rpart(Target ~ Age + BMI + Gender + Cholesterol + Glucose + Smoking + Alcohol, data = train, method = "exp")
fit <- rpart(Target ~ Age + BMI + Gender + Cholesterol + Glucose + Smoking + Alcohol, data = train, method = "exp")
fit <- rpart(Target ~ Age + BMI + Gender + Cholesterol + Glucose + Smoking + Alcohol, data = train)
fancyRpartPlot(fit)
fit <- rpart(Target ~ Age + BMI + Gender + Cholesterol + Glucose + Smoking + Alcohol, data = data)
fancyRpartPlot(fit)
fit <- rpart(Target ~ Age + BMI + Gender + Cholesterol + Glucose + Smoking + Active + Alcohol, data = data)
fancyRpartPlot(fit)
fit <- rpart(Target ~ Gender + Cholesterol + Glucose + Smoking + Active + Alcohol, data = data)
fancyRpartPlot(fit)
table(train$Target)
table(test$Target)
~ Gender + Cholesterol + Glucose + Smoking + Active + Alcohol, data = data)
fit <- rpart(Target ~ Gender + Cholesterol + Glucose + Smoking + Active + Alcohol, data = data)
fancyRpartPlot(fit)
predict <- predict(fit, test, method = "class")
predict
fit <- rpart(Target ~ Gender + Cholesterol + Glucose + Smoking + Active + Alcohol, data = data, control = rpart.control(cp = 0.005))
fancyRpartPlot(fit)
fit <- rpart(Target ~ Gender + Cholesterol + Glucose + Smoking + Active + Alcohol, data = data, control = rpart.control(cp = 0.005, minsplit = 5))
fancyRpartPlot(fit)
as.table(predict)
class(predict)
predict <- predict.rpart(fit, test, method = "class")
predict <-  rpart::xpred.rpart(fit, test, method = "class")
predict <-  rpart::xpred.rpart(fit, test)
# returns cross-validated results of fitness
predict <-  rpart::xpred.rpart(fit, 10)
type(predict)
class(predict)
# returns cross-validated results of fitness
predict <-  rpart::xpred.rpart(fit, 10)
predict
fit
# returns cross-validated results of fitness
predict <-  predict(fit, test, method = "class")
predict
table(data$Target, predicted = predict)
table(test$Target, predicted = predict)
# returns cross-validated results of fitness
predict <-  predict(fit, test, method = "class", type = "class")
table(test$Target, predicted = predict)
table(Actual = test$Target, Predicted = predict)
# train/test split
set.seed(1994)
split <- initial_split(data, prop=0.75, strata = "Target")
train <- training(split)
test <- testing(split)
fit <- rpart(Target ~ Gender + Cholesterol + Glucose + Smoking + Active + Alcohol, data = data, control = rpart.control(cp = 0.005, minsplit = 5))
fancyRpartPlot(fit)
# returns cross-validated results of fitness
predict <-  predict(fit, test, method = "class", type = "class")
table(Actual = test$Target, Predicted = predict)
set.seed(1994)
split <- initial_split(data, prop=0.75, strata = "Target")
train <- training(split)
test <- testing(split)
fit <- rpart(Target ~ Gender + Cholesterol + Glucose + Smoking + Active + Alcohol, data = data, control = rpart.control(cp = 0.005, minsplit = 10))
fancyRpartPlot(fit)
# returns cross-validated results of fitness
predict <-  predict(fit, test, method = "class", type = "class")
table(Actual = test$Target, Predicted = predict)
fancyRpartPlot(fit)
fit <- rpart(Target ~ Gender + Cholesterol + Glucose + Smoking + Active + Alcohol, data = data, control = rpart.control(minsplit = 10))
fancyRpartPlot(fit)
fit <- rpart(Target ~ Gender + Cholesterol + Glucose + Smoking + Active + Alcohol, data = data, control = rpart.control(minsplit = 1000))
fancyRpartPlot(fit)
fit <- rpart(Target ~ Cholesterol + Glucose + Smoking + Active + Alcohol, data = data, control = rpart.control(minsplit = 1000))
fancyRpartPlot(fit)
fit <- rpart(Target ~  Glucose + Smoking + Active + Alcohol, data = data, control = rpart.control(minsplit = 1000))
fancyRpartPlot(fit)
fit <- rpart(Target ~  Glucose + Smoking + Active + Alcohol, data = data, control = rpart.control(minsplit = 1000), xval = 5)
fancyRpartPlot(fit)
tree_fit <- rpart(Target ~  Glucose + Smoking + Active + Alcohol, data = data, control = rpart.control(minsplit = 1000), xval = 5)
fancyRpartPlot(tree_fit)
install.packages("Amelia")
library(Amelia)
library(corrplot)
# explores missing values
missmap(data)
# explores types of the attributes
unlist(sapply(data, class))
# summerizes dataset
summary(data)
prop.table(train$Target) * 100
prop.table(table(train$Target)) * 100
prop.table(table(test$Target)) * 100
```{r}
split <- initial_split(data, prop=0.75, strata = "Target")
train <- training(split)
test <- testing(split)
# checks class distribution after the split
prop.table(table(train$Target)) * 100
prop.table(table(test$Target)) * 100
install.packages("e1071")
library(e1071)
nb_model = train(train[, -c("Target")], train["Target"], 'nb', trControl = trainControl(method='cv',number=10))
library(varhandle)
library(Amelia)
library(corrplot)
library(ggplot2)
library(rpart)
library(rpart.plot)
library(rattle)
library(RColorBrewer)
library(e1071)
nb_model = train(train[, -c("Target")], train["Target"], 'nb', trControl = trainControl(method='cv',number=10))
# train/test split
set.seed(1994)
split <- initial_split(data, prop=0.75, strata = "Target")
training_set <- training(split)
testing_set <- testing(split)
# checks class distribution after the split
prop.table(table(training_set$Target)) * 100
prop.table(table(testing_set$Target)) * 100
tree_fit <- rpart(Target ~  Glucose + Smoking + Active + Alcohol, data = training_set, control = rpart.control(minsplit = 1000), xval = 5)
fancyRpartPlot(tree_fit)
nb_model = train(training_set[, -c("Target")], training_set["Target"], 'nb', trControl = trainControl(method='cv',number=10))
nb_model = naiveBayes(training_set[, -c("Target")], training_set["Target"])
nb_model = naiveBayes(Target ~ .)
nb_model = naiveBayes(Target ~ ., data = training_set)
predict <-  predict(fit, testing_set, method = "class", type = "class")
table(Actual = test$Target, Predicted = predict)
predict <-  predict(tree_fit, testing_set, method = "class", type = "class")
table(Actual = test$Target, Predicted = predict)
predicted_nb <-  predict(nb_model, testing_set, method = "class", type = "class")
table(Actual = test$Target, Predicted = predicted_nb)
precision <- posPredValue(predict, training_set["Target"], positive="Positive")
install.packages("caret")
library(caret)
precision <- posPredValue(predict, training_set["Target"], positive="Positive")
precision <- posPredValue(as.factor(predict), training_set["Target"], positive="Positive")
class(predict)
precision <- posPredValue(as.factor(predict), training_set["Target"], positive="Positive")
precision <- posPredValue(as.factor(predict), as.factor(training_set["Target"]), positive="Positive")
recall <- sensitivity(predict, training_set["Target"] , positive="Positive")
precision <- posPredValue(as.factor(predict), as.factor(testing_set["Target"]), positive="Positive")
class(testing_set["Target"])
class(testing_set[["Target"]])
precision <- posPredValue(as.factor(predict), as.factor(testing_set[["Target"]]), positive="Positive")
recall <- sensitivity(predict, testing_set[["Target"]] , positive="Positive")
predict <-  predict(tree_fit, testing_set, method = "class", type = "class")
table(Actual = test$Target, Predicted = predict)
tree_precision <- posPredValue(as.factor(predict), testing_set[["Target"]], positive="Positive")
tree_recall <- sensitivity(predict, testing_set[["Target"]] , positive="Positive")
tree_precision
tree_recall
predicted_nb <-  predict(nb_model, testing_set, method = "class", type = "class")
table(Actual = test$Target, Predicted = predicted_nb)
nb_precision <- posPredValue(as.factor(predicted_nb), testing_set[["Target"]], positive="Positive")
nb_recall <- sensitivity(predicted_nb, testing_set[["Target"]] , positive="Positive")
nb_precision
nb_recall
print("Precision: ", tree_precision)
print("Precision: " + tree_precision)
print("Precision: ", tree_precision)
cat("Precision: ", tree_precision)
cat("Recall: ", tree_recall)
predict <-  predict(tree_fit, testing_set, method = "class", type = "class")
table(Actual = test$Target, Predicted = predict)
tree_precision <- posPredValue(as.factor(predict), testing_set[["Target"]], positive="Positive")
tree_recall <- sensitivity(predict, testing_set[["Target"]] , positive="Positive")
cat("Precision: ", tree_precision)
cat("Recall: ", tree_recall)
cat("Precision: ", tree_precision * 100 , "\n")
predict <-  predict(tree_fit, testing_set, method = "class", type = "class")
table(Actual = test$Target, Predicted = predict)
tree_precision <- posPredValue(as.factor(predict), testing_set[["Target"]], positive="Positive")
tree_recall <- sensitivity(predict, testing_set[["Target"]] , positive="Positive")
cat("Precision: ", tree_precision * 100 , "%\n")
cat("Recall: ", tree_recall * 100, "%\n")
predict <-  predict(tree_fit, testing_set, method = "class", type = "class")
table(Actual = test$Target, Predicted = predict)
tree_precision <- posPredValue(as.factor(predict), testing_set[["Target"]], positive="Positive")
tree_recall <- sensitivity(predict, testing_set[["Target"]] , positive="Positive")
cat("\n")
cat("Precision: ", tree_precision * 100 , "%\n")
cat("Recall: ", tree_recall * 100, "%\n")
predicted_nb <-  predict(nb_model, testing_set, method = "class", type = "class")
table(Actual = test$Target, Predicted = predicted_nb)
nb_precision <- posPredValue(as.factor(predicted_nb), testing_set[["Target"]], positive="Positive")
nb_recall <- sensitivity(predicted_nb, testing_set[["Target"]] , positive="Positive")
cat("\n")
cat("Precision: ", nb_precision * 100 , "%\n")
cat("Recall: ", nb_recall * 100, "%\n")
heatmap(table(Actual = test$Target, Predicted = predict))
table(Actual = test$Target, Predicted = predict)
ggplot(data =  data.frame(Actual = test$Target, Predicted = predict), mapping = aes(x = Predicted, y = Actual)) + geom_tile(aes(fill = Y), colour = "white") + geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) + scale_fill_gradient(low = "blue", high = "red") + theme_bw() + theme(legend.position = "none")
ggplot(data =  data.frame(Actual = test$Target, Predicted = predict), mapping = aes(x = Predicted, y = Actual)) + geom_tile(aes(fill = testing_set["Target"]), colour = "white") + geom_text(aes(label = sprintf("%1.0f", Y)), vjust = 1) + scale_fill_gradient(low = "blue", high = "red") + theme_bw() + theme(legend.position = "none")
ggplot(data =  data.frame(Actual = test$Target, Predicted = predict), mapping = aes(x = Predicted, y = Actual)) + geom_tile(aes(fill = testing_set["Target"]), colour = "white") + geom_text(aes(label = sprintf("%1.0f", testing_set["Target"])), vjust = 1) + scale_fill_gradient(low = "blue", high = "red") + theme_bw() + theme(legend.position = "none")
predict <-  predict(tree_fit, testing_set, method = "class", type = "class")
table(Actual = test$Target, Predicted = predict)
tree_precision <- posPredValue(as.factor(predict), testing_set[["Target"]], positive="Positive")
tree_recall <- sensitivity(predict, testing_set[["Target"]] , positive="Positive")
cat("\n")
cat("Precision: ", tree_precision * 100 , "%\n")
cat("Recall: ", tree_recall * 100, "%\n")
